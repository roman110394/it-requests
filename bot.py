import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes

# –¢–æ–∫–µ–Ω –∏ ID —á–∞—Ç–∞
TOKEN = os.getenv("TOKEN")
CHAT_ID = int(os.getenv("CHAT_ID"))

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞—è–≤–æ–∫
tickets = {}
ticket_counter = 1

# –ö–æ–º–∞–Ω–¥–∞ /start –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–ü–û", callback_data="type_software")],
        [InlineKeyboardButton("–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ", callback_data="type_hardware")],
        [InlineKeyboardButton("–°–µ—Ç—å", callback_data="type_network")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ —Ç–∏–ø –ø—Ä–æ–±–ª–µ–º—ã:", reply_markup=reply_markup)

# –í—ã–±–æ—Ä —Ç–∏–ø–∞ –ø—Ä–æ–±–ª–µ–º—ã
async def type_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data['type'] = query.data.split('_')[1]  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä
    await query.edit_message_text(text=f"–¢—ã –≤—ã–±—Ä–∞–ª {context.user_data['type']}. –¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏ –ø—Ä–æ–±–ª–µ–º—É.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —Ñ–æ—Ç–æ
async def relay(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global ticket_counter
    user_type = context.user_data.get('type', '–ù–µ —É–∫–∞–∑–∞–Ω')
    ticket_id = ticket_counter
    ticket_counter += 1

    ticket = {
        "user": update.message.from_user.full_name,
        "text": update.message.text or "",
        "photo": update.message.photo[-1].file_id if update.message.photo else None,
        "status": "–ù–æ–≤–∞—è",
        "type": user_type
    }
    tickets[ticket_id] = ticket

    keyboard = [
        [
            InlineKeyboardButton("–í —Ä–∞–±–æ—Ç–µ", callback_data=f"status_{ticket_id}_in_progress"),
            InlineKeyboardButton("–ò—Å–ø–æ–ª–Ω–µ–Ω–∞", callback_data=f"status_{ticket_id}_done")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    msg = f"üÜï –ó–∞—è–≤–∫–∞ #{ticket_id}\n–¢–∏–ø: {ticket['type']}\n–°—Ç–∞—Ç—É—Å: {ticket['status']}\n–û—Ç: {ticket['user']}\n–û–ø–∏—Å–∞–Ω–∏–µ: {ticket['text']}"

    if ticket['photo']:
        await context.bot.send_photo(chat_id=CHAT_ID, photo=ticket['photo'], caption=msg, reply_markup=reply_markup)
    else:
        await context.bot.send_message(chat_id=CHAT_ID, text=msg, reply_markup=reply_markup)

    await update.message.reply_text(f"–ó–∞—è–≤–∫–∞ #{ticket_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –°—Ç–∞—Ç—É—Å: {ticket['status']}")

# –°–º–µ–Ω–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏
async def status_change(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data.split('_')
    ticket_id = int(data[1])
    new_status = "–í —Ä–∞–±–æ—Ç–µ" if data[2] == "in" else "–ò—Å–ø–æ–ª–Ω–µ–Ω–∞"

    if ticket_id in tickets:
        tickets[ticket_id]['status'] = new_status
        ticket = tickets[ticket_id]
        msg = f"üìù –ó–∞—è–≤–∫–∞ #{ticket_id}\n–¢–∏–ø: {ticket['type']}\n–°—Ç–∞—Ç—É—Å: {ticket['status']}\n–û—Ç: {ticket['user']}\n–û–ø–∏—Å–∞–Ω–∏–µ: {ticket['text']}"
        await query.edit_message_text(text=msg)
    else:
        await query.edit_message_text("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(type_choice, pattern="^type_"))
    app.add_handler(MessageHandler(filters.TEXT | filters.PHOTO, relay))
    app.add_handler(CallbackQueryHandler(status_change, pattern="^status_"))

    # –ó–∞–ø—É—Å–∫ –∫–∞–∫ –≤–æ—Ä–∫–µ—Ä ‚Äî long polling
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ Render worker...")
    app.run_polling()

if __name__ == "__main__":
    main()
