import os
import asyncio
from fastapi import FastAPI
import uvicorn
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler

# --- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
TOKEN = os.getenv("TOKEN")
CHAT_ID = int(os.getenv("CHAT_ID"))

# --- –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–æ–∫ ---
tickets = {}
ticket_counter = 1

# --- –ö–æ–º–∞–Ω–¥–∞ /start ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–≤–æ–µ–π –ø—Ä–æ–±–ª–µ–º—ã. –ú–æ–∂–Ω–æ —Å —Ñ–æ—Ç–æ."
    )

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —Ñ–æ—Ç–æ ---
async def relay(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global ticket_counter
    ticket_id = ticket_counter
    ticket_counter += 1

    status = "–ù–æ–≤–∞—è"
    tickets[ticket_id] = {"user": update.message.from_user.full_name, "status": status}

    text = f"üÜï –ó–∞—è–≤–∫–∞ #{ticket_id} –æ—Ç {update.message.from_user.full_name}\n–°—Ç–∞—Ç—É—Å: {status}\n"
    if update.message.text:
        text += f"–û–ø–∏—Å–∞–Ω–∏–µ: {update.message.text}"
        await context.bot.send_message(chat_id=CHAT_ID, text=text)
    elif update.message.photo:
        photo_id = update.message.photo[-1].file_id
        caption = f"{text}\n–§–æ—Ç–æ-–∑–∞—è–≤–∫–∞"
        await context.bot.send_photo(chat_id=CHAT_ID, photo=photo_id, caption=caption)

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    keyboard = [
        [InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏", callback_data=f"status_{ticket_id}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –ú–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –Ω–∏–∂–µ:", reply_markup=reply_markup)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ ---
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    if data.startswith("status_"):
        ticket_id = int(data.split("_")[1])
        ticket = tickets.get(ticket_id)
        if ticket:
            await query.edit_message_text(f"–ó–∞—è–≤–∫–∞ #{ticket_id} –æ—Ç {ticket['user']}\n–°—Ç–∞—Ç—É—Å: {ticket['status']}")
        else:
            await query.edit_message_text("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

# --- FastAPI –¥–ª—è –æ–±—Ö–æ–¥–∞ Render in progress ---
app = FastAPI()

@app.get("/")
async def root():
    return {"status": "ok"}

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
async def start_bot():
    application = Application.builder().token(TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT | filters.PHOTO, relay))
    application.add_handler(CallbackQueryHandler(button))
    await application.run_polling()

# --- –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---
if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º FastAPI –∏ –±–æ—Ç–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
    loop = asyncio.get_event_loop()
    loop.create_task(start_bot())
    uvicorn.run(app, host="0.0.0.0", port=int(os.getenv("PORT", 10000)))
